{"ast":null,"code":"import _slicedToArray from \"/Users/win/modern-react-bootcamp/section-12-lights-out-game/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/win/modern-react-bootcamp/section-12-lights-out-game/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/win/modern-react-bootcamp/section-12-lights-out-game/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/win/modern-react-bootcamp/section-12-lights-out-game/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/win/modern-react-bootcamp/section-12-lights-out-game/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/win/modern-react-bootcamp/section-12-lights-out-game/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/win/modern-react-bootcamp/section-12-lights-out-game/src/Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nvar Board = /*#__PURE__*/function (_Component) {\n  _inherits(Board, _Component);\n\n  function Board() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Board)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      hasWon: false,\n      board: _this.createBoard()\n    };\n\n    _this.flipCellsAround = function (coord) {\n      var _this$props = _this.props,\n          ncols = _this$props.ncols,\n          nrows = _this$props.nrows;\n      var board = _this.state.board;\n\n      var _coord$split$map = coord.split(\"-\").map(Number),\n          _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n          y = _coord$split$map2[0],\n          x = _coord$split$map2[1];\n\n      function flipCell(y, x) {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          board[y][x] = !board[y][x];\n        }\n      }\n\n      flipCell(y, x); //Flip clicked cell\n\n      flipCell(y, x - 1); //Flip left cell\n\n      flipCell(y, x + 1); //Flip right cell\n\n      flipCell(y - 1, x); //Flip below cell\n\n      flipCell(y + 1, x); //Flip above cell\n      // win when every cell is turned off\n      // TODO: determine is the game has been won\n\n      var hasWon = false;\n\n      _this.setState({\n        board: board,\n        hasWon: hasWon\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Board, [{\n    key: \"createBoard\",\n    value: function createBoard() {\n      var board = [];\n\n      for (var y = 0; y < this.props.nrows; y++) {\n        var row = [];\n\n        for (var x = 0; x < this.props.ncols; x++) {\n          row.push(Math.random() < this.props.chanceLightStartsOn);\n        }\n\n        board.push(row);\n      }\n\n      return board;\n    }\n    /** handle changing a cell: update board & determine if winner */\n\n  }, {\n    key: \"render\",\n\n    /** Render game board or winning message. */\n    value: function render() {\n      var _this2 = this;\n\n      var tableBoard = [];\n\n      for (var y = 0; y < this.props.nrows; y++) {\n        var row = [];\n\n        var _loop = function _loop(x) {\n          var coord = \"\".concat(y, \"-\").concat(x);\n          row.push( /*#__PURE__*/React.createElement(Cell, {\n            key: coord,\n            isLit: _this2.state.board[y][x],\n            flipCellsAroundMe: function flipCellsAroundMe() {\n              return _this2.flipCellsAround(coord);\n            },\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 11\n            }\n          }));\n        };\n\n        for (var x = 0; x < this.props.ncols; x++) {\n          _loop(x);\n        }\n\n        tableBoard.push( /*#__PURE__*/React.createElement(\"tr\", {\n          key: y,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 23\n          }\n        }, row));\n      }\n\n      if (hasWon) {\n        tableBoard = /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 21\n          }\n        }, \"YOU WIN!\");\n      } // if the game is won, just show a winning msg & render nothing else\n      // TODO\n      // make table board\n      // TODO\n\n\n      return /*#__PURE__*/React.createElement(\"table\", {\n        className: \"Board\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"tbody\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 9\n        }\n      }, tableBoard));\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nBoard.defaultProps = {\n  nrows: 5,\n  ncols: 5,\n  chanceLightStartsOn: 0.25\n};\nexport default Board;","map":{"version":3,"sources":["/Users/win/modern-react-bootcamp/section-12-lights-out-game/src/Board.js"],"names":["React","Component","Cell","Board","state","hasWon","board","createBoard","flipCellsAround","coord","props","ncols","nrows","split","map","Number","y","x","flipCell","setState","row","push","Math","random","chanceLightStartsOn","tableBoard","defaultProps"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n\n  static defaultProps = {\n    nrows: 5,\n    ncols: 5,\n    chanceLightStartsOn: 0.25\n  };\n\n  state = {\n    hasWon: false,\n    board: this.createBoard()\n  }\n\n  createBoard() {\n    let board = [];\n    \n    for(let y=0; y < this.props.nrows; y++) {\n      let row = [];\n      for(let x = 0; x < this.props.ncols; x++) {\n        row.push(Math.random() < this.props.chanceLightStartsOn)\n      }\n      board.push(row);\n    }\n    return board\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround = (coord) => {\n\n    let {ncols, nrows} = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    flipCell(y, x); //Flip clicked cell\n    flipCell(y, x - 1); //Flip left cell\n    flipCell(y, x + 1); //Flip right cell\n    flipCell(y - 1, x); //Flip below cell\n    flipCell(y + 1, x); //Flip above cell\n    \n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n    let hasWon = false;\n\n    this.setState({board, hasWon});\n  }\n\n\n  /** Render game board or winning message. */\n\n  render() {\n\n    let tableBoard = [];\n    for(let y = 0; y < this.props.nrows; y++){\n      let row = [];\n      for(let x = 0; x < this.props.ncols; x++){\n        let coord = `${y}-${x}`\n        row.push(\n          <Cell \n            key={coord} \n            isLit={this.state.board[y][x]}\n            flipCellsAroundMe={() => this.flipCellsAround(coord)}/>)\n      }\n      tableBoard.push(<tr key={y}>{row}</tr>)\n    }\n\n    if(hasWon) {\n      tableBoard = (<div>YOU WIN!</div>)\n    }\n    // if the game is won, just show a winning msg & render nothing else\n\n    // TODO\n\n    // make table board\n\n    // TODO\n\n    return (\n      <table className='Board'>\n        <tbody>\n          {tableBoard}\n        </tbody>\n      </table>\n    )\n  }\n}\n\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}