{"ast":null,"code":"var _jsxFileName = \"/Users/win/modern-react-bootcamp/section-24-colour-palette/src/NewPaletteForm.js\";\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport classNames from \"classnames\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport Fab from '@material-ui/core/Fab';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport { ChromePicker } from 'react-color';\nimport { arrayMove } from 'react-sortable-hoc';\nimport PaletteFormNavbar from './PaletteFormNavbar';\nimport DraggableColourList from './DraggableColorList';\nconst drawerWidth = 500;\n\nconst styles = theme => ({\n  root: {\n    display: \"flex\"\n  },\n  appBar: {\n    transition: theme.transitions.create([\"margin\", \"width\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    })\n  },\n  appBarShift: {\n    width: `calc(100% - ${drawerWidth}px)`,\n    marginLeft: drawerWidth,\n    transition: theme.transitions.create([\"margin\", \"width\"], {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen\n    })\n  },\n  menuButton: {\n    marginLeft: 12,\n    marginRight: 20\n  },\n  hide: {\n    display: \"none\"\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0\n  },\n  drawerPaper: {\n    width: drawerWidth\n  },\n  drawerHeader: {\n    display: \"flex\",\n    alignItems: \"center\",\n    padding: \"0 8px\",\n    ...theme.mixins.toolbar,\n    justifyContent: \"flex-end\"\n  },\n  content: {\n    flexGrow: 1,\n    height: 'calc(100vh - 64px)',\n    padding: theme.spacing.unit * 3,\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    }),\n    marginLeft: -drawerWidth\n  },\n  contentShift: {\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen\n    }),\n    marginLeft: 0\n  }\n});\n\nclass NewPaletteForm extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      open: true,\n      currentColor: 'skyblue',\n      colorName: '',\n      colors: this.props.palettes[0].colors,\n      newPaletteName: ''\n    };\n\n    this.handleDrawerOpen = () => {\n      this.setState({\n        open: true\n      });\n    };\n\n    this.handleDrawerClose = () => {\n      this.setState({\n        open: false\n      });\n    };\n\n    this.updateCurrentColorHandler = newColor => {\n      this.setState({\n        currentColor: newColor.hex\n      });\n    };\n\n    this.addNewColorHandler = () => {\n      const newColor = {\n        color: this.state.currentColor,\n        name: this.state.colorName\n      };\n      this.setState({\n        colors: [...this.state.colors, newColor],\n        newName: ''\n      });\n    };\n\n    this.paletteChangeHandler = evt => {\n      this.setState({\n        [evt.target.name]: evt.target.value\n      });\n    };\n\n    this.savePaletteHandler = () => {\n      let newName = this.state.newPaletteName;\n      const newPalette = {\n        paletteName: newName,\n        id: newName.toLowerCase().replace(/ /g, '-'),\n        colors: this.state.colors\n      };\n      this.props.savePalette(newPalette);\n      this.props.history.push('/');\n    };\n\n    this.deleteColorHandler = colorName => {\n      this.setState({\n        colors: this.state.colors.filter(color => color.name !== colorName)\n      });\n    };\n\n    this.sortEndHandler = ({\n      oldIndex,\n      newIndex\n    }) => {\n      this.setState(({\n        colors\n      }) => ({\n        colors: arrayMove(colors, oldIndex, newIndex)\n      }));\n    };\n\n    this.clearPaletteHandler = () => {\n      this.setState({\n        colors: []\n      });\n    };\n\n    this.randomColorHandler = () => {\n      const allColors = this.props.palettes.map(p => p.colors).flat();\n      var randomNumber = Math.floor(Math.random() * allColors.length);\n      const randomColor = allColors[randomNumber];\n      this.setState({\n        colors: [...this.state.colors, randomColor]\n      });\n    };\n  }\n\n  componentDidMount() {\n    ValidatorForm.addValidationRule('isColorNameUnique', value => this.state.colors.every(({\n      name\n    }) => name.toLowerCase() !== value.toLowerCase()));\n    ValidatorForm.addValidationRule('isColorUnique', value => this.state.colors.every(({\n      color\n    }) => color !== this.state.currentColor));\n    ValidatorForm.addValidationRule(\"isPaletteNameUnique\", value => this.props.palettes.every(({\n      paletteName\n    }) => paletteName.toLowerCase() !== value.toLowerCase()));\n  }\n\n  render() {\n    const {\n      classes,\n      maxColors\n    } = this.props;\n    const {\n      open,\n      currentColor,\n      colors,\n      colorName,\n      newPaletteName\n    } = this.state;\n    const paletteIsFull = colors.length >= maxColors;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.root,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(PaletteFormNavbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Drawer, {\n      className: classes.drawer,\n      variant: \"persistent\",\n      anchor: \"left\",\n      open: open,\n      classes: {\n        paper: classes.drawerPaper\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.drawerHeader,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(IconButton, {\n      onClick: this.handleDrawerClose,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(ChevronLeftIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 15\n      }\n    }))), /*#__PURE__*/React.createElement(Typography, {\n      variant: \"h4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 11\n      }\n    }, \"Design Your Palette\"), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Fab, {\n      variant: \"extended\",\n      color: \"secondary\",\n      onClick: this.clearPaletteHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 13\n      }\n    }, \"Clear Palette\"), /*#__PURE__*/React.createElement(Fab, {\n      variant: \"extended\",\n      color: \"primary\",\n      onClick: this.randomColorHandler,\n      disabled: paletteIsFull,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 13\n      }\n    }, paletteIsFull ? 'Palette Full' : 'Random Color')), /*#__PURE__*/React.createElement(Divider, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(ChromePicker, {\n      color: currentColor,\n      onChangeComplete: this.updateCurrentColorHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(ValidatorForm, {\n      onSubmit: this.addNewColorHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(TextValidator, {\n      value: colorName,\n      name: \"colorName\",\n      onChange: this.paletteChangeHandler,\n      validators: ['required', 'isColorUnique', 'isColorNameUnique'],\n      errorMessages: ['Enter a color name', 'Color is already used', 'Color name must be unique'],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Fab, {\n      variant: \"extended\",\n      type: \"submit\",\n      color: \"primary\",\n      style: {\n        backgroundColor: paletteIsFull ? 'grey' : currentColor\n      },\n      disabled: paletteIsFull,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 13\n      }\n    }, paletteIsFull ? 'Palette Full' : 'Add Color'))), /*#__PURE__*/React.createElement(\"main\", {\n      className: classNames(classes.content, {\n        [classes.contentShift]: open\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.drawerHeader,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(DraggableColourList, {\n      colors: colors,\n      deleteColorHandler: this.deleteColorHandler,\n      axis: \"xy\",\n      onSortEnd: this.sortEndHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nNewPaletteForm.defaultProps = {\n  maxColors: 20\n};\nexport default withStyles(styles, {\n  withTheme: true\n})(NewPaletteForm);","map":{"version":3,"sources":["/Users/win/modern-react-bootcamp/section-24-colour-palette/src/NewPaletteForm.js"],"names":["React","Component","Link","classNames","withStyles","Drawer","CssBaseline","AppBar","Toolbar","Typography","Divider","IconButton","MenuIcon","ChevronLeftIcon","Fab","ValidatorForm","TextValidator","ChromePicker","arrayMove","PaletteFormNavbar","DraggableColourList","drawerWidth","styles","theme","root","display","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","width","marginLeft","easeOut","enteringScreen","menuButton","marginRight","hide","drawer","flexShrink","drawerPaper","drawerHeader","alignItems","padding","mixins","toolbar","justifyContent","content","flexGrow","height","spacing","unit","contentShift","NewPaletteForm","state","open","currentColor","colorName","colors","props","palettes","newPaletteName","handleDrawerOpen","setState","handleDrawerClose","updateCurrentColorHandler","newColor","hex","addNewColorHandler","color","name","newName","paletteChangeHandler","evt","target","value","savePaletteHandler","newPalette","paletteName","id","toLowerCase","replace","savePalette","history","push","deleteColorHandler","filter","sortEndHandler","oldIndex","newIndex","clearPaletteHandler","randomColorHandler","allColors","map","p","flat","randomNumber","Math","floor","random","length","randomColor","componentDidMount","addValidationRule","every","render","classes","maxColors","paletteIsFull","paper","backgroundColor","defaultProps","withTheme"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport classNames from \"classnames\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport Fab from '@material-ui/core/Fab';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport { ChromePicker } from 'react-color';\nimport { arrayMove } from 'react-sortable-hoc';\n\nimport PaletteFormNavbar from './PaletteFormNavbar'\nimport DraggableColourList from './DraggableColorList';\n\nconst drawerWidth = 500;\n\nconst styles = theme => ({\n  root: {\n    display: \"flex\"\n  },\n  appBar: {\n    transition: theme.transitions.create([\"margin\", \"width\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    })\n  },\n  appBarShift: {\n    width: `calc(100% - ${drawerWidth}px)`,\n    marginLeft: drawerWidth,\n    transition: theme.transitions.create([\"margin\", \"width\"], {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen\n    })\n  },\n  menuButton: {\n    marginLeft: 12,\n    marginRight: 20\n  },\n  hide: {\n    display: \"none\"\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0\n  },\n  drawerPaper: {\n    width: drawerWidth\n  },\n  drawerHeader: {\n    display: \"flex\",\n    alignItems: \"center\",\n    padding: \"0 8px\",\n    ...theme.mixins.toolbar,\n    justifyContent: \"flex-end\"\n  },\n  content: {\n    flexGrow: 1,\n    height: 'calc(100vh - 64px)',\n    padding: theme.spacing.unit * 3,\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    }),\n    marginLeft: -drawerWidth\n  },\n  contentShift: {\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen\n    }),\n    marginLeft: 0\n  }\n});\n\nclass NewPaletteForm extends Component {\n  static defaultProps = {\n    maxColors: 20\n  }\n\n  state = {\n    open: true,\n    currentColor: 'skyblue',\n    colorName: '',\n    colors: this.props.palettes[0].colors,\n    newPaletteName: '',\n  };\n\n  componentDidMount() {\n    ValidatorForm.addValidationRule('isColorNameUnique', value => \n      this.state.colors.every(\n        ({name}) => name.toLowerCase() !== value.toLowerCase()\n      )\n    );\n    ValidatorForm.addValidationRule('isColorUnique', value => \n      this.state.colors.every(\n        ({color}) => color !== this.state.currentColor)\n    );\n    ValidatorForm.addValidationRule(\"isPaletteNameUnique\", value =>\n    this.props.palettes.every(\n      ({ paletteName }) => paletteName.toLowerCase() !== value.toLowerCase()\n    )\n  );\n  }\n\n  handleDrawerOpen = () => {\n    this.setState({ open: true });\n  };\n\n  handleDrawerClose = () => {\n    this.setState({ open: false });\n  };\n\n  updateCurrentColorHandler = (newColor) => {\n    this.setState({ currentColor: newColor.hex});\n  }\n\n  addNewColorHandler = () => {\n    const newColor = { \n      color: this.state.currentColor,\n      name: this.state.colorName }\n    this.setState({colors: [...this.state.colors, newColor], newName: ''});\n  }\n\n  paletteChangeHandler = (evt) => {\n    this.setState({\n      [evt.target.name]: evt.target.value\n    });\n  }\n\n  savePaletteHandler = () => {\n    let newName = this.state.newPaletteName;\n    const newPalette = {\n      paletteName: newName, \n      id: newName.toLowerCase().replace(/ /g, '-'), \n      colors: this.state.colors};\n    this.props.savePalette(newPalette);\n    this.props.history.push('/');\n  }\n\n  deleteColorHandler = (colorName) => {\n    this.setState({\n      colors: this.state.colors.filter(color => color.name !== colorName)\n    });\n  }\n\n  sortEndHandler = ({oldIndex, newIndex}) => {\n    this.setState(({colors}) => ({\n      colors: arrayMove(colors, oldIndex, newIndex),\n    }));\n  }\n\n  clearPaletteHandler = () => {\n    this.setState({colors: []});\n  }\n\n  randomColorHandler = () => {\n    const allColors = this.props.palettes.map(p => p.colors).flat();\n    var randomNumber = Math.floor(Math.random() * allColors.length);\n    const randomColor = allColors[randomNumber];\n    this.setState({colors: [...this.state.colors, randomColor]});\n  }\n\n  render() {\n    const { classes, maxColors } = this.props;\n    const { open, currentColor, colors, colorName, newPaletteName } = this.state;\n    const paletteIsFull = colors.length >= maxColors;\n\n    return (\n      <div className={classes.root}>\n        <PaletteFormNavbar/>\n        <Drawer\n          className={classes.drawer}\n          variant='persistent'\n          anchor='left'\n          open={open}\n          classes={{\n            paper: classes.drawerPaper\n          }}\n        >\n          <div className={classes.drawerHeader}>\n            <IconButton onClick={this.handleDrawerClose}>\n              <ChevronLeftIcon />\n            </IconButton>\n          </div>\n          <Typography variant='h4'>Design Your Palette</Typography>\n          <div>\n            <Fab variant='extended' color='secondary' onClick={this.clearPaletteHandler}>\n              Clear Palette\n            </Fab>\n            <Fab variant='extended' color='primary' onClick={this.randomColorHandler} disabled={paletteIsFull}>\n            {paletteIsFull ? 'Palette Full' : 'Random Color'}\n            </Fab>\n          </div>\n          <Divider />\n          <ChromePicker \n            color={currentColor} \n            onChangeComplete={this.updateCurrentColorHandler}/>\n          <ValidatorForm onSubmit={this.addNewColorHandler}>\n            <TextValidator \n              value={colorName} \n              name='colorName'\n              onChange={this.paletteChangeHandler}\n              validators={['required', 'isColorUnique', 'isColorNameUnique']}\n              errorMessages={['Enter a color name', 'Color is already used', 'Color name must be unique']}\n              />\n            <Fab \n            variant='extended'\n            type='submit' \n            color='primary'\n            style={{ backgroundColor: paletteIsFull ? 'grey' : currentColor}}\n            disabled={paletteIsFull}\n            >\n              {paletteIsFull ? 'Palette Full' : 'Add Color'}\n            </Fab>\n          </ValidatorForm>\n        </Drawer>\n        <main\n          className={classNames(classes.content, {\n            [classes.contentShift]: open\n          })}\n        >\n          <div className={classes.drawerHeader} />\n          <DraggableColourList \n            colors={colors} \n            deleteColorHandler={this.deleteColorHandler}\n            axis='xy'\n            onSortEnd={this.sortEndHandler}\n            />\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles, {withTheme: true})(NewPaletteForm);"]},"metadata":{},"sourceType":"module"}