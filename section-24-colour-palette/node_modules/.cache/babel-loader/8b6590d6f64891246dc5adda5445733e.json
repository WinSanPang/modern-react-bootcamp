{"ast":null,"code":"var _jsxFileName = \"/Users/win/modern-react-bootcamp/section-24-colour-palette/src/PaletteMetaForm.js\";\nimport React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport Fab from '@material-ui/core/Fab';\nimport { Picker } from 'emoji-mart';\nimport 'emoji-mart/css/emoji-mart.css';\n\nclass PaletteMetaForm extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      stage: 'form',\n      newPaletteName: ''\n    };\n\n    this.paletteChangeHandler = evt => {\n      this.setState({\n        [evt.target.name]: evt.target.value\n      });\n    };\n\n    this.handleClickOpen = () => {\n      this.setState({\n        open: true\n      });\n    };\n\n    this.handleClose = () => {\n      this.setState({\n        open: false\n      });\n    };\n  }\n\n  componentDidMount() {\n    ValidatorForm.addValidationRule(\"isPaletteNameUnique\", value => this.props.palettes.every(({\n      paletteName\n    }) => paletteName.toLowerCase() !== value.toLowerCase()));\n  }\n\n  showEmojiHandler() {\n    this.setState({\n      stage: 'emoji'\n    });\n  }\n\n  render() {\n    const {\n      newPaletteName,\n      stage\n    } = this.state;\n    const {\n      savePaletteHandler,\n      hideFormHandler\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Dialog, {\n      open: stage === 'emoji',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Picker, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(Dialog, {\n      open: stage === 'form',\n      onClose: this.handleClose,\n      \"aria-labelledby\": \"form-dialog-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(DialogTitle, {\n      id: \"form-dialog-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }\n    }, \"Subscribe\"), /*#__PURE__*/React.createElement(ValidatorForm, {\n      onSubmit: () => this.showEmojiHandler(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(DialogContent, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(DialogContentText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }\n    }, \"Please enter a name for your new colourful palette. Make sure the palette name is unique!\"), /*#__PURE__*/React.createElement(TextValidator, {\n      label: \"Palette Name\",\n      value: newPaletteName,\n      name: \"newPaletteName\",\n      onChange: this.paletteChangeHandler,\n      validators: ['required', 'isPaletteNameUnique'],\n      errorMessages: ['Enter a palette name', 'Palette name must be unique'],\n      fullWidth: true,\n      margin: \"normal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(DialogActions, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      onClick: hideFormHandler,\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }\n    }, \"Cancel\"), /*#__PURE__*/React.createElement(Fab, {\n      variant: \"extended\",\n      color: \"primary\",\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }\n    }, \"Save Palette\")))));\n  }\n\n}\n\nexport default PaletteMetaForm;","map":{"version":3,"sources":["/Users/win/modern-react-bootcamp/section-24-colour-palette/src/PaletteMetaForm.js"],"names":["React","Component","Button","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","ValidatorForm","TextValidator","Fab","Picker","PaletteMetaForm","state","stage","newPaletteName","paletteChangeHandler","evt","setState","target","name","value","handleClickOpen","open","handleClose","componentDidMount","addValidationRule","props","palettes","every","paletteName","toLowerCase","showEmojiHandler","render","savePaletteHandler","hideFormHandler"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,aAAP,MAA0B,iCAA1B;AACA,OAAOC,aAAP,MAA0B,iCAA1B;AACA,OAAOC,iBAAP,MAA8B,qCAA9B;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,kCAA7C;AACA,OAAOC,GAAP,MAAgB,uBAAhB;AACA,SAASC,MAAT,QAAuB,YAAvB;AACA,OAAO,+BAAP;;AAEA,MAAMC,eAAN,SAA8BX,SAA9B,CAAwC;AAAA;AAAA;AAAA,SACpCY,KADoC,GAC5B;AACNC,MAAAA,KAAK,EAAE,MADD;AAENC,MAAAA,cAAc,EAAE;AAFV,KAD4B;;AAAA,SAcpCC,oBAdoC,GAcZC,GAAD,IAAS;AAC9B,WAAKC,QAAL,CAAc;AACZ,SAACD,GAAG,CAACE,MAAJ,CAAWC,IAAZ,GAAmBH,GAAG,CAACE,MAAJ,CAAWE;AADlB,OAAd;AAGD,KAlBmC;;AAAA,SAoBpCC,eApBoC,GAoBlB,MAAM;AACtB,WAAKJ,QAAL,CAAc;AAACK,QAAAA,IAAI,EAAE;AAAP,OAAd;AACD,KAtBmC;;AAAA,SAwBpCC,WAxBoC,GAwBtB,MAAM;AAClB,WAAKN,QAAL,CAAc;AAACK,QAAAA,IAAI,EAAE;AAAP,OAAd;AACD,KA1BmC;AAAA;;AAMpCE,EAAAA,iBAAiB,GAAG;AAClBjB,IAAAA,aAAa,CAACkB,iBAAd,CAAgC,qBAAhC,EAAuDL,KAAK,IAC5D,KAAKM,KAAL,CAAWC,QAAX,CAAoBC,KAApB,CACE,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAqBA,WAAW,CAACC,WAAZ,OAA8BV,KAAK,CAACU,WAAN,EADrD,CADA;AAKD;;AAgBDC,EAAAA,gBAAgB,GAAE;AAChB,SAAKd,QAAL,CAAc;AAACJ,MAAAA,KAAK,EAAE;AAAR,KAAd;AACD;;AAEDmB,EAAAA,MAAM,GAAG;AACP,UAAM;AAAElB,MAAAA,cAAF;AAAkBD,MAAAA;AAAlB,QAA4B,KAAKD,KAAvC;AACA,UAAM;AAAEqB,MAAAA,kBAAF;AAAsBC,MAAAA;AAAtB,QAA0C,KAAKR,KAArD;AAEF,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,MAAD;AAAQ,MAAA,IAAI,EAAEb,KAAK,KAAK,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,eAIE,oBAAC,MAAD;AAAQ,MAAA,IAAI,EAAEA,KAAK,KAAK,MAAxB;AAAgC,MAAA,OAAO,EAAE,KAAKU,WAA9C;AAA2D,yBAAgB,mBAA3E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,WAAD;AAAa,MAAA,EAAE,EAAC,mBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,eAEE,oBAAC,aAAD;AAAe,MAAA,QAAQ,EAAE,MAAM,KAAKQ,gBAAL,EAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mGADF,eAKI,oBAAC,aAAD;AACE,MAAA,KAAK,EAAC,cADR;AAEE,MAAA,KAAK,EAAEjB,cAFT;AAGE,MAAA,IAAI,EAAC,gBAHP;AAIE,MAAA,QAAQ,EAAE,KAAKC,oBAJjB;AAKE,MAAA,UAAU,EAAE,CAAC,UAAD,EAAa,qBAAb,CALd;AAME,MAAA,aAAa,EAAE,CAAC,sBAAD,EAAyB,6BAAzB,CANjB;AAOE,MAAA,SAAS,MAPX;AAQE,MAAA,MAAM,EAAC,QART;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALJ,CADA,eAiBA,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAEmB,eAAjB;AAAkC,MAAA,KAAK,EAAC,SAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAIE,oBAAC,GAAD;AAAK,MAAA,OAAO,EAAC,UAAb;AAAwB,MAAA,KAAK,EAAC,SAA9B;AAAwC,MAAA,IAAI,EAAC,QAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAJF,CAjBA,CAFF,CAJF,CADF;AAkCD;;AAtEqC;;AAyExC,eAAevB,eAAf","sourcesContent":["import React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport Fab from '@material-ui/core/Fab';\nimport { Picker } from 'emoji-mart';\nimport 'emoji-mart/css/emoji-mart.css';\n\nclass PaletteMetaForm extends Component {\n    state = {\n      stage: 'form',\n      newPaletteName: ''\n    };\n    \n    componentDidMount() {\n      ValidatorForm.addValidationRule(\"isPaletteNameUnique\", value =>\n      this.props.palettes.every(\n        ({ paletteName }) => paletteName.toLowerCase() !== value.toLowerCase()\n        )\n      );\n    }\n\n    paletteChangeHandler = (evt) => {\n      this.setState({\n        [evt.target.name]: evt.target.value\n      });\n    }\n\n    handleClickOpen = () => {\n      this.setState({open: true});\n    };\n  \n    handleClose = () => {\n      this.setState({open: false});\n    };\n    \n    showEmojiHandler(){\n      this.setState({stage: 'emoji'});\n    }\n\n    render() {\n      const { newPaletteName, stage } = this.state;\n      const { savePaletteHandler, hideFormHandler } = this.props;\n\n    return (\n      <div>\n        <Dialog open={stage === 'emoji'}>\n          <Picker/>\n        </Dialog>\n        <Dialog open={stage === 'form'} onClose={this.handleClose} aria-labelledby=\"form-dialog-title\">\n          <DialogTitle id=\"form-dialog-title\">Subscribe</DialogTitle>\n          <ValidatorForm onSubmit={() => this.showEmojiHandler()}>\n          <DialogContent>\n            <DialogContentText>\n              Please enter a name for your new colourful palette. Make sure the palette name is unique!\n            </DialogContentText>\n            \n              <TextValidator \n                label='Palette Name' \n                value={newPaletteName}\n                name='newPaletteName' \n                onChange={this.paletteChangeHandler}\n                validators={['required', 'isPaletteNameUnique']}\n                errorMessages={['Enter a palette name', 'Palette name must be unique']}\n                fullWidth\n                margin='normal'\n                />\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={hideFormHandler} color=\"primary\">\n              Cancel\n            </Button>\n            <Fab variant='extended' color='primary' type='submit'>Save Palette</Fab>\n          </DialogActions>\n          </ValidatorForm>\n        </Dialog>\n      </div>  \n    );\n  }\n}\n\nexport default PaletteMetaForm;"]},"metadata":{},"sourceType":"module"}