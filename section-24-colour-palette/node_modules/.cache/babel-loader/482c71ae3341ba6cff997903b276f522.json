{"ast":null,"code":"var _jsxFileName = \"/Users/win/modern-react-bootcamp/section-24-colour-palette/src/ColorPickerForm.js\";\nimport React, { Component } from 'react';\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Fab from '@material-ui/core/Fab';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport { ChromePicker } from 'react-color';\nconst styles = {\n  colorPicker: {\n    width: '100% !important',\n    marginTop: '2rem'\n  },\n  addColor: {\n    width: '100%',\n    padding: '1rem',\n    marginTop: '1rem',\n    fontSize: '1rem'\n  },\n  colorNameInput: {\n    width: '100%'\n  }\n};\n\nclass ColorPickerForm extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      currentColor: 'skyblue',\n      colorName: ''\n    };\n\n    this.updateCurrentColorHandler = newColor => {\n      this.setState({\n        currentColor: newColor.hex\n      });\n    };\n\n    this.paletteChangeHandler = evt => {\n      this.setState({\n        [evt.target.name]: evt.target.value\n      });\n    };\n\n    this.addNewColorHandler = () => {\n      const newColor = {\n        color: this.state.currentColor,\n        name: this.state.colorName\n      };\n      this.props.addNewColorHandler(newColor);\n      this.setState({\n        colorName: ''\n      });\n    };\n  }\n\n  componentDidMount() {\n    ValidatorForm.addValidationRule('isColorNameUnique', value => this.props.colors.every(({\n      name\n    }) => name.toLowerCase() !== value.toLowerCase()));\n    ValidatorForm.addValidationRule('isColorUnique', value => this.props.colors.every(({\n      color\n    }) => color !== this.state.currentColor));\n  }\n\n  render() {\n    const {\n      paletteIsFull,\n      classes\n    } = this.props;\n    const {\n      currentColor,\n      colorName\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(ChromePicker, {\n      color: currentColor,\n      onChangeComplete: this.updateCurrentColorHandler,\n      className: classes.colorPicker,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(ValidatorForm, {\n      onSubmit: this.addNewColorHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(TextValidator, {\n      value: colorName,\n      className: classes.colorNameInput,\n      name: \"colorName\",\n      onChange: this.paletteChangeHandler,\n      validators: ['required', 'isColorUnique', 'isColorNameUnique'],\n      errorMessages: ['Enter a color name', 'Color is already used', 'Color name must be unique'],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Fab, {\n      variant: \"extended\",\n      className: classes.addColor,\n      type: \"submit\",\n      color: \"primary\",\n      style: {\n        backgroundColor: paletteIsFull ? 'grey' : currentColor\n      },\n      disabled: paletteIsFull,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }\n    }, paletteIsFull ? 'Palette Full' : 'Add Color')));\n  }\n\n}\n\nexport default withStyles(styles)(ColorPickerForm);","map":{"version":3,"sources":["/Users/win/modern-react-bootcamp/section-24-colour-palette/src/ColorPickerForm.js"],"names":["React","Component","withStyles","Fab","ValidatorForm","TextValidator","ChromePicker","styles","colorPicker","width","marginTop","addColor","padding","fontSize","colorNameInput","ColorPickerForm","state","currentColor","colorName","updateCurrentColorHandler","newColor","setState","hex","paletteChangeHandler","evt","target","name","value","addNewColorHandler","color","props","componentDidMount","addValidationRule","colors","every","toLowerCase","render","paletteIsFull","classes","backgroundColor"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Fab from '@material-ui/core/Fab';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport { ChromePicker } from 'react-color';\n\nconst styles = {\n  colorPicker: {\n    width: '100% !important',\n    marginTop: '2rem'\n  },\n  addColor: {\n    width: '100%',\n    padding: '1rem',\n    marginTop: '1rem',\n    fontSize: '1rem',\n  },\n  colorNameInput: {\n    width: '100%'\n  }\n}\n\nclass ColorPickerForm extends Component {\n  state = {\n    currentColor: 'skyblue',\n    colorName: '',\n  }\n  \n  componentDidMount() {\n    ValidatorForm.addValidationRule('isColorNameUnique', value => \n      this.props.colors.every(\n        ({name}) => name.toLowerCase() !== value.toLowerCase()\n      )\n    );\n    ValidatorForm.addValidationRule('isColorUnique', value => \n      this.props.colors.every(\n        ({color}) => color !== this.state.currentColor)\n    );\n  }\n\n  updateCurrentColorHandler = (newColor) => {\n    this.setState({ currentColor: newColor.hex});\n  }\n\n  paletteChangeHandler = (evt) => {\n    this.setState({\n      [evt.target.name]: evt.target.value\n    });\n  }\n\n  addNewColorHandler = () => {\n    const newColor = { \n      color: this.state.currentColor,\n      name: this.state.colorName }\n    this.props.addNewColorHandler(newColor);\n    this.setState({colorName: ''})\n  }\n\n  render() {\n    const { paletteIsFull, classes } = this.props;\n    const { currentColor, colorName } = this.state;\n\n    return (\n      <div>\n        <ChromePicker \n            color={currentColor} \n            onChangeComplete={this.updateCurrentColorHandler}\n            className={classes.colorPicker}\n            />\n          <ValidatorForm onSubmit={this.addNewColorHandler}>\n            <TextValidator \n              value={colorName} \n              className={classes.colorNameInput}\n              name='colorName'\n              onChange={this.paletteChangeHandler}\n              validators={['required', 'isColorUnique', 'isColorNameUnique']}\n              errorMessages={['Enter a color name', 'Color is already used', 'Color name must be unique']}\n              />\n            <Fab \n              variant='extended'\n              className={classes.addColor}\n              type='submit' \n              color='primary'\n              style={{ backgroundColor: paletteIsFull ? 'grey' : currentColor}}\n              disabled={paletteIsFull}\n            >\n              {paletteIsFull ? 'Palette Full' : 'Add Color'}\n            </Fab>\n          </ValidatorForm>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(ColorPickerForm);"]},"metadata":{},"sourceType":"module"}