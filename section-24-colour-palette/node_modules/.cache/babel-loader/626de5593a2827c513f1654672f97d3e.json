{"ast":null,"code":"var _jsxFileName = \"/Users/win/modern-react-bootcamp/section-24-colour-palette/src/NewPaletteForm.js\";\nimport React, { Component } from 'react';\nimport classNames from \"classnames\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport Fab from '@material-ui/core/Fab';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport { ChromePicker } from 'react-color';\nimport DraggableColourBox from './DraggableColourBox';\nconst drawerWidth = 500;\n\nconst styles = theme => ({\n  root: {\n    display: \"flex\"\n  },\n  appBar: {\n    transition: theme.transitions.create([\"margin\", \"width\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    })\n  },\n  appBarShift: {\n    width: `calc(100% - ${drawerWidth}px)`,\n    marginLeft: drawerWidth,\n    transition: theme.transitions.create([\"margin\", \"width\"], {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen\n    })\n  },\n  menuButton: {\n    marginLeft: 12,\n    marginRight: 20\n  },\n  hide: {\n    display: \"none\"\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0\n  },\n  drawerPaper: {\n    width: drawerWidth\n  },\n  drawerHeader: {\n    display: \"flex\",\n    alignItems: \"center\",\n    padding: \"0 8px\",\n    ...theme.mixins.toolbar,\n    justifyContent: \"flex-end\"\n  },\n  content: {\n    flexGrow: 1,\n    height: 'calc(100vh - 64px)',\n    padding: theme.spacing.unit * 3,\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    }),\n    marginLeft: -drawerWidth\n  },\n  contentShift: {\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen\n    }),\n    marginLeft: 0\n  }\n});\n\nclass NewPaletteForm extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      open: true,\n      currentColour: 'skyblue',\n      colourName: '',\n      colours: [],\n      newPaletteName: ''\n    };\n\n    this.handleDrawerOpen = () => {\n      this.setState({\n        open: true\n      });\n    };\n\n    this.handleDrawerClose = () => {\n      this.setState({\n        open: false\n      });\n    };\n\n    this.updateCurrentColourHandler = newColour => {\n      this.setState({\n        currentColour: newColour.hex\n      });\n    };\n\n    this.addNewColourHandler = () => {\n      const newColour = {\n        color: this.state.currentColour,\n        name: this.state.colourName\n      };\n      this.setState({\n        colours: [...this.state.colours, newColour],\n        newName: ''\n      });\n    };\n\n    this.paletteChangeHandler = evt => {\n      this.setState({\n        colourName: evt.target.value\n      });\n    };\n\n    this.savePaletteHandler = () => {\n      let newColourName = 'New Test Palette Colour';\n      const newPalette = {\n        paletteName: newColourName,\n        id: newColourName.toLowerCase().replace(/ /g, '-'),\n        colors: this.state.colours\n      };\n      this.props.savePalette(newPalette);\n      this.props.history.push('/');\n    };\n  }\n\n  componentDidMount() {\n    ValidatorForm.addValidationRule('isColourNameUnique', value => this.state.colours.every(({\n      name\n    }) => name.toLowerCase() !== value.toLowerCase()));\n    ValidatorForm.addValidationRule('isColourUnique', value => this.state.colours.every(({\n      colour\n    }) => colour !== this.state.currentColour));\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    const {\n      open,\n      currentColour,\n      colours\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.root,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(CssBaseline, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(AppBar, {\n      position: \"fixed\",\n      color: \"default\",\n      className: classNames(classes.appBar, {\n        [classes.appBarShift]: open\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Toolbar, {\n      disableGutters: !open,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(IconButton, {\n      color: \"inherit\",\n      \"aria-label\": \"Open drawer\",\n      onClick: this.handleDrawerOpen,\n      className: classNames(classes.menuButton, open && classes.hide),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(MenuIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(Typography, {\n      variant: \"h6\",\n      color: \"inherit\",\n      noWrap: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 13\n      }\n    }, \"Create Your Own Palette\"), /*#__PURE__*/React.createElement(TextValidator, {\n      label: \"Palette Name\",\n      value: this.state.newPaletteName,\n      onChange: this.paletteChangeHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Fab, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: this.savePaletteHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 13\n      }\n    }, \"Save Palette\"))), /*#__PURE__*/React.createElement(Drawer, {\n      className: classes.drawer,\n      variant: \"persistent\",\n      anchor: \"left\",\n      open: open,\n      classes: {\n        paper: classes.drawerPaper\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.drawerHeader,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(IconButton, {\n      onClick: this.handleDrawerClose,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(ChevronLeftIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 15\n      }\n    }))), /*#__PURE__*/React.createElement(Typography, {\n      variant: \"h4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 11\n      }\n    }, \"Design Your Palette\"), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Fab, {\n      variant: \"contained\",\n      color: \"secondary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 13\n      }\n    }, \"Clear Palette\"), /*#__PURE__*/React.createElement(Fab, {\n      variant: \"contained\",\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 13\n      }\n    }, \"Random Colour\")), /*#__PURE__*/React.createElement(Divider, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(ChromePicker, {\n      color: currentColour,\n      onChangeComplete: this.updateCurrentColourHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(ValidatorForm, {\n      onSubmit: this.addNewColourHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(TextValidator, {\n      value: this.state.colourName,\n      onChange: this.colourNameHandler,\n      validators: ['required', 'isColourUnique', 'isColourNameUnique'],\n      errorMessages: ['Enter a colour name', 'Colour is already used', 'Colour name must be unique'],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Fab, {\n      variant: \"contained\",\n      type: \"submit\",\n      color: \"primary\",\n      style: {\n        backgroundColor: currentColour\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 13\n      }\n    }, \"Add Colour\"))), /*#__PURE__*/React.createElement(\"main\", {\n      className: classNames(classes.content, {\n        [classes.contentShift]: open\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.drawerHeader,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 11\n      }\n    }), colours.map(color => /*#__PURE__*/React.createElement(DraggableColourBox, {\n      color: color.color,\n      name: color.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 15\n      }\n    }))));\n  }\n\n}\n\nexport default withStyles(styles, {\n  withTheme: true\n})(NewPaletteForm);","map":{"version":3,"sources":["/Users/win/modern-react-bootcamp/section-24-colour-palette/src/NewPaletteForm.js"],"names":["React","Component","classNames","withStyles","Drawer","CssBaseline","AppBar","Toolbar","Typography","Divider","IconButton","MenuIcon","ChevronLeftIcon","Fab","ValidatorForm","TextValidator","ChromePicker","DraggableColourBox","drawerWidth","styles","theme","root","display","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","width","marginLeft","easeOut","enteringScreen","menuButton","marginRight","hide","drawer","flexShrink","drawerPaper","drawerHeader","alignItems","padding","mixins","toolbar","justifyContent","content","flexGrow","height","spacing","unit","contentShift","NewPaletteForm","state","open","currentColour","colourName","colours","newPaletteName","handleDrawerOpen","setState","handleDrawerClose","updateCurrentColourHandler","newColour","hex","addNewColourHandler","color","name","newName","paletteChangeHandler","evt","target","value","savePaletteHandler","newColourName","newPalette","paletteName","id","toLowerCase","replace","colors","props","savePalette","history","push","componentDidMount","addValidationRule","every","colour","render","classes","paper","colourNameHandler","backgroundColor","map","withTheme"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport classNames from \"classnames\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport Fab from '@material-ui/core/Fab';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport { ChromePicker } from 'react-color';\n\nimport DraggableColourBox from './DraggableColourBox';\n\nconst drawerWidth = 500;\n\nconst styles = theme => ({\n  root: {\n    display: \"flex\"\n  },\n  appBar: {\n    transition: theme.transitions.create([\"margin\", \"width\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    })\n  },\n  appBarShift: {\n    width: `calc(100% - ${drawerWidth}px)`,\n    marginLeft: drawerWidth,\n    transition: theme.transitions.create([\"margin\", \"width\"], {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen\n    })\n  },\n  menuButton: {\n    marginLeft: 12,\n    marginRight: 20\n  },\n  hide: {\n    display: \"none\"\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0\n  },\n  drawerPaper: {\n    width: drawerWidth\n  },\n  drawerHeader: {\n    display: \"flex\",\n    alignItems: \"center\",\n    padding: \"0 8px\",\n    ...theme.mixins.toolbar,\n    justifyContent: \"flex-end\"\n  },\n  content: {\n    flexGrow: 1,\n    height: 'calc(100vh - 64px)',\n    padding: theme.spacing.unit * 3,\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    }),\n    marginLeft: -drawerWidth\n  },\n  contentShift: {\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen\n    }),\n    marginLeft: 0\n  }\n});\n\nclass NewPaletteForm extends Component {\n  state = {\n    open: true,\n    currentColour: 'skyblue',\n    colourName: '',\n    colours: [],\n    newPaletteName: '',\n  };\n\n  componentDidMount() {\n    ValidatorForm.addValidationRule('isColourNameUnique', value => \n      this.state.colours.every(\n        ({name}) => name.toLowerCase() !== value.toLowerCase()\n      )\n    );\n    ValidatorForm.addValidationRule('isColourUnique', value => \n      this.state.colours.every(\n        ({colour}) => colour !== this.state.currentColour)\n    );\n  }\n\n  handleDrawerOpen = () => {\n    this.setState({ open: true });\n  };\n\n  handleDrawerClose = () => {\n    this.setState({ open: false });\n  };\n\n  updateCurrentColourHandler = (newColour) => {\n    this.setState({ currentColour: newColour.hex});\n  }\n\n  addNewColourHandler = () => {\n    const newColour = { \n      color: this.state.currentColour,\n      name: this.state.colourName }\n    this.setState({colours: [...this.state.colours, newColour], newName: ''});\n  }\n\n  paletteChangeHandler = (evt) => {\n    this.setState({colourName: evt.target.value});\n  }\n\n  savePaletteHandler = () => {\n    let newColourName = 'New Test Palette Colour';\n    const newPalette = {\n      paletteName: newColourName, \n      id: newColourName.toLowerCase().replace(/ /g, '-'), \n      colors: this.state.colours};\n    this.props.savePalette(newPalette);\n    this.props.history.push('/');\n  }\n\n  render() {\n    const { classes } = this.props;\n    const { open, currentColour, colours } = this.state;\n\n    return (\n      <div className={classes.root}>\n        <CssBaseline />\n        <AppBar\n          position='fixed'\n          color='default'\n          className={classNames(classes.appBar, {\n            [classes.appBarShift]: open\n          })}\n        >\n          <Toolbar disableGutters={!open}>\n            <IconButton\n              color='inherit'\n              aria-label='Open drawer'\n              onClick={this.handleDrawerOpen}\n              className={classNames(classes.menuButton, open && classes.hide)}\n            >\n              <MenuIcon />\n            </IconButton>\n            <Typography variant='h6' color='inherit' noWrap>\n              Create Your Own Palette\n            </Typography>\n            <TextValidator label='Palette Name' value={this.state.newPaletteName} onChange={this.paletteChangeHandler}/>\n            <Fab variant='contained' color='primary' onClick={this.savePaletteHandler}>Save Palette</Fab>\n          </Toolbar>\n        </AppBar>\n        <Drawer\n          className={classes.drawer}\n          variant='persistent'\n          anchor='left'\n          open={open}\n          classes={{\n            paper: classes.drawerPaper\n          }}\n        >\n          <div className={classes.drawerHeader}>\n            <IconButton onClick={this.handleDrawerClose}>\n              <ChevronLeftIcon />\n            </IconButton>\n          </div>\n          <Typography variant='h4'>Design Your Palette</Typography>\n          <div>\n            <Fab variant='contained' color='secondary'>\n              Clear Palette\n            </Fab>\n            <Fab variant='contained' color='primary'>\n              Random Colour\n            </Fab>\n          </div>\n          <Divider />\n          <ChromePicker \n            color={currentColour} \n            onChangeComplete={this.updateCurrentColourHandler}/>\n          <ValidatorForm onSubmit={this.addNewColourHandler}>\n            <TextValidator \n              value={this.state.colourName} \n              onChange={this.colourNameHandler}\n              validators={['required', 'isColourUnique', 'isColourNameUnique']}\n              errorMessages={['Enter a colour name', 'Colour is already used', 'Colour name must be unique']}\n              />\n            <Fab \n            variant='contained'\n            type='submit' \n            color='primary'\n            style={{backgroundColor: currentColour}}\n            >\n              Add Colour\n            </Fab>\n          </ValidatorForm>\n        </Drawer>\n        <main\n          className={classNames(classes.content, {\n            [classes.contentShift]: open\n          })}\n        >\n          <div className={classes.drawerHeader} />\n            {colours.map(color => (\n              <DraggableColourBox color={color.color} name={color.name}/>\n            ))}\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles, {withTheme: true})(NewPaletteForm);"]},"metadata":{},"sourceType":"module"}