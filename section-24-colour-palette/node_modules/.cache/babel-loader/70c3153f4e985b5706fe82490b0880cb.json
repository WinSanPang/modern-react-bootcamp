{"ast":null,"code":"var _jsxFileName = \"/Users/win/modern-react-bootcamp/section-24-colour-palette/src/PaletteMetaForm.js\";\nimport React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport Fab from '@material-ui/core/Fab';\n\nclass PaletteMetaForm extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      open: false,\n      newPaletteName: ''\n    };\n\n    this.paletteChangeHandler = evt => {\n      this.setState({\n        [evt.target.name]: evt.target.value\n      });\n    };\n\n    this.handleClickOpen = () => {\n      this.setState({\n        open: true\n      });\n    };\n\n    this.handleClose = () => {\n      this.setState({\n        open: false\n      });\n    };\n  }\n\n  componentDidMount() {\n    ValidatorForm.addValidationRule(\"isPaletteNameUnique\", value => this.props.palettes.every(({\n      paletteName\n    }) => paletteName.toLowerCase() !== value.toLowerCase()));\n  }\n\n  render() {\n    const {\n      newPaletteName\n    } = this.state;\n    const {\n      savePaletteHandler\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      variant: \"outlined\",\n      color: \"primary\",\n      onClick: this.handleClickOpen,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }\n    }, \"Save Your Palette\"), /*#__PURE__*/React.createElement(Dialog, {\n      open: this.state.open,\n      onClose: this.handleClose,\n      \"aria-labelledby\": \"form-dialog-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(DialogTitle, {\n      id: \"form-dialog-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }\n    }, \"Subscribe\"), /*#__PURE__*/React.createElement(ValidatorForm, {\n      onSubmit: () => savePaletteHandler(newPaletteName),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(DialogContent, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(DialogContentText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }\n    }, \"Please enter a name for your new colourful palette. Make sure the palette name is unique!\"), /*#__PURE__*/React.createElement(TextValidator, {\n      label: \"Palette Name\",\n      value: newPaletteName,\n      name: \"newPaletteName\",\n      onChange: this.paletteChangeHandler,\n      validators: ['required', 'isPaletteNameUnique'],\n      errorMessages: ['Enter a palette name', 'Palette name must be unique'],\n      fullWidth: true,\n      margin: \"normal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(DialogActions, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      onClick: this.handleClose,\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }\n    }, \"Cancel\"), /*#__PURE__*/React.createElement(Fab, {\n      variant: \"extended\",\n      color: \"primary\",\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }\n    }, \"Save Palette\")))));\n  }\n\n}\n\nexport default PaletteMetaForm;","map":{"version":3,"sources":["/Users/win/modern-react-bootcamp/section-24-colour-palette/src/PaletteMetaForm.js"],"names":["React","Component","Button","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","ValidatorForm","TextValidator","Fab","PaletteMetaForm","state","open","newPaletteName","paletteChangeHandler","evt","setState","target","name","value","handleClickOpen","handleClose","componentDidMount","addValidationRule","props","palettes","every","paletteName","toLowerCase","render","savePaletteHandler"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport Fab from '@material-ui/core/Fab';\n\nclass PaletteMetaForm extends Component {\n    state = {\n      open: false,\n      newPaletteName: ''\n    };\n    \n    componentDidMount() {\n      ValidatorForm.addValidationRule(\"isPaletteNameUnique\", value =>\n      this.props.palettes.every(\n        ({ paletteName }) => paletteName.toLowerCase() !== value.toLowerCase()\n        )\n      );\n    }\n\n    paletteChangeHandler = (evt) => {\n      this.setState({\n        [evt.target.name]: evt.target.value\n      });\n    }\n\n    handleClickOpen = () => {\n      this.setState({open: true});\n    };\n  \n    handleClose = () => {\n      this.setState({open: false});\n    };\n  \n    render() {\n      const { newPaletteName } = this.state;\n      const { savePaletteHandler } = this.props;\n\n    return (\n      <div>\n        <Button variant=\"outlined\" color=\"primary\" onClick={this.handleClickOpen}>\n          Save Your Palette\n        </Button>\n        <Dialog open={this.state.open} onClose={this.handleClose} aria-labelledby=\"form-dialog-title\">\n          <DialogTitle id=\"form-dialog-title\">Subscribe</DialogTitle>\n          <ValidatorForm onSubmit={() => savePaletteHandler(newPaletteName)}>\n          <DialogContent>\n            <DialogContentText>\n              Please enter a name for your new colourful palette. Make sure the palette name is unique!\n            </DialogContentText>\n              <TextValidator \n                label='Palette Name' \n                value={newPaletteName}\n                name='newPaletteName' \n                onChange={this.paletteChangeHandler}\n                validators={['required', 'isPaletteNameUnique']}\n                errorMessages={['Enter a palette name', 'Palette name must be unique']}\n                fullWidth\n                margin='normal'\n                />\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={this.handleClose} color=\"primary\">\n              Cancel\n            </Button>\n            <Fab variant='extended' color='primary' type='submit'>Save Palette</Fab>\n          </DialogActions>\n          </ValidatorForm>\n        </Dialog>\n      </div>\n    );\n  }\n}\n\nexport default PaletteMetaForm;"]},"metadata":{},"sourceType":"module"}