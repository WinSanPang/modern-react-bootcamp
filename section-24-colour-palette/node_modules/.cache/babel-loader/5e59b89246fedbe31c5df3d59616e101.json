{"ast":null,"code":"var _jsxFileName = \"/Users/win/modern-react-bootcamp/section-24-colour-palette/src/NewPaletteForm.js\";\nimport React, { Component } from 'react';\nimport classNames from \"classnames\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport Fab from '@material-ui/core/Fab';\nimport { ValidatorForm } from 'react-material-ui-form-validator';\nimport { arrayMove } from 'react-sortable-hoc';\nimport PaletteFormNavbar from './PaletteFormNavbar';\nimport ColorPickerForm from './ColorPickerForm';\nimport DraggableColourList from './DraggableColorList';\nconst drawerWidth = 500;\n\nconst styles = theme => ({\n  root: {\n    display: \"flex\"\n  },\n  appBar: {\n    transition: theme.transitions.create([\"margin\", \"width\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    })\n  },\n  appBarShift: {\n    width: `calc(100% - ${drawerWidth}px)`,\n    marginLeft: drawerWidth,\n    transition: theme.transitions.create([\"margin\", \"width\"], {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen\n    })\n  },\n  menuButton: {\n    marginLeft: 12,\n    marginRight: 20\n  },\n  hide: {\n    display: \"none\"\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0\n  },\n  drawerPaper: {\n    width: drawerWidth\n  },\n  drawerHeader: {\n    display: \"flex\",\n    alignItems: \"center\",\n    padding: \"0 8px\",\n    ...theme.mixins.toolbar,\n    justifyContent: \"flex-end\"\n  },\n  content: {\n    flexGrow: 1,\n    height: 'calc(100vh - 64px)',\n    padding: theme.spacing.unit * 3,\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    }),\n    marginLeft: -drawerWidth\n  },\n  contentShift: {\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen\n    }),\n    marginLeft: 0\n  }\n});\n\nclass NewPaletteForm extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      open: true,\n      colors: this.props.palettes[0].colors,\n      newPaletteName: ''\n    };\n\n    this.handleDrawerOpen = () => {\n      this.setState({\n        open: true\n      });\n    };\n\n    this.handleDrawerClose = () => {\n      this.setState({\n        open: false\n      });\n    };\n\n    this.addNewColorHandler = newColor => {\n      this.setState({\n        colors: [...this.state.colors, newColor],\n        newName: ''\n      });\n    };\n\n    this.paletteChangeHandler = evt => {\n      this.setState({\n        [evt.target.name]: evt.target.value\n      });\n    };\n\n    this.savePaletteHandler = newPaletteName => {\n      const newPalette = {\n        paletteName: newPaletteName,\n        id: newPaletteName.toLowerCase().replace(/ /g, '-'),\n        colors: this.state.colors\n      };\n      this.props.savePalette(newPalette);\n      this.props.history.push('/');\n    };\n\n    this.deleteColorHandler = colorName => {\n      this.setState({\n        colors: this.state.colors.filter(color => color.name !== colorName)\n      });\n    };\n\n    this.sortEndHandler = ({\n      oldIndex,\n      newIndex\n    }) => {\n      this.setState(({\n        colors\n      }) => ({\n        colors: arrayMove(colors, oldIndex, newIndex)\n      }));\n    };\n\n    this.clearPaletteHandler = () => {\n      this.setState({\n        colors: []\n      });\n    };\n\n    this.randomColorHandler = () => {\n      const allColors = this.props.palettes.map(p => p.colors).flat();\n      var randomNumber = Math.floor(Math.random() * allColors.length);\n      const randomColor = allColors[randomNumber];\n      this.setState({\n        colors: [...this.state.colors, randomColor]\n      });\n    };\n  }\n\n  componentDidMount() {\n    ValidatorForm.addValidationRule('isColorNameUnique', value => this.state.colors.every(({\n      name\n    }) => name.toLowerCase() !== value.toLowerCase()));\n    ValidatorForm.addValidationRule('isColorUnique', value => this.state.colors.every(({\n      color\n    }) => color !== this.state.currentColor));\n  }\n\n  render() {\n    const {\n      classes,\n      maxColors,\n      palettes\n    } = this.props;\n    const {\n      open,\n      colors\n    } = this.state;\n    const paletteIsFull = colors.length >= maxColors;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.root,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(PaletteFormNavbar, {\n      open: open,\n      classes: classes,\n      palettes: palettes,\n      savePaletteHandler: this.savePaletteHandler,\n      handleDrawerOpen: this.handleDrawerOpen,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Drawer, {\n      className: classes.drawer,\n      variant: \"persistent\",\n      anchor: \"left\",\n      open: open,\n      classes: {\n        paper: classes.drawerPaper\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.drawerHeader,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(IconButton, {\n      onClick: this.handleDrawerClose,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(ChevronLeftIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 15\n      }\n    }))), /*#__PURE__*/React.createElement(Typography, {\n      variant: \"h4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 11\n      }\n    }, \"Design Your Palette\"), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Fab, {\n      variant: \"extended\",\n      color: \"secondary\",\n      onClick: this.clearPaletteHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 13\n      }\n    }, \"Clear Palette\"), /*#__PURE__*/React.createElement(Fab, {\n      variant: \"extended\",\n      color: \"primary\",\n      onClick: this.randomColorHandler,\n      disabled: paletteIsFull,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 13\n      }\n    }, paletteIsFull ? 'Palette Full' : 'Random Color')), /*#__PURE__*/React.createElement(Divider, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(ColorPickerForm, {\n      paletteIsFull: paletteIsFull,\n      addNewColorHandler: this.addNewColorHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"main\", {\n      className: classNames(classes.content, {\n        [classes.contentShift]: open\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.drawerHeader,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(DraggableColourList, {\n      colors: colors,\n      deleteColorHandler: this.deleteColorHandler,\n      axis: \"xy\",\n      onSortEnd: this.sortEndHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nNewPaletteForm.defaultProps = {\n  maxColors: 20\n};\nexport default withStyles(styles, {\n  withTheme: true\n})(NewPaletteForm);","map":{"version":3,"sources":["/Users/win/modern-react-bootcamp/section-24-colour-palette/src/NewPaletteForm.js"],"names":["React","Component","classNames","withStyles","Drawer","Typography","Divider","IconButton","ChevronLeftIcon","Fab","ValidatorForm","arrayMove","PaletteFormNavbar","ColorPickerForm","DraggableColourList","drawerWidth","styles","theme","root","display","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","width","marginLeft","easeOut","enteringScreen","menuButton","marginRight","hide","drawer","flexShrink","drawerPaper","drawerHeader","alignItems","padding","mixins","toolbar","justifyContent","content","flexGrow","height","spacing","unit","contentShift","NewPaletteForm","state","open","colors","props","palettes","newPaletteName","handleDrawerOpen","setState","handleDrawerClose","addNewColorHandler","newColor","newName","paletteChangeHandler","evt","target","name","value","savePaletteHandler","newPalette","paletteName","id","toLowerCase","replace","savePalette","history","push","deleteColorHandler","colorName","filter","color","sortEndHandler","oldIndex","newIndex","clearPaletteHandler","randomColorHandler","allColors","map","p","flat","randomNumber","Math","floor","random","length","randomColor","componentDidMount","addValidationRule","every","currentColor","render","classes","maxColors","paletteIsFull","paper","defaultProps","withTheme"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport classNames from \"classnames\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport Fab from '@material-ui/core/Fab';\nimport { ValidatorForm } from 'react-material-ui-form-validator';\nimport { arrayMove } from 'react-sortable-hoc';\n\nimport PaletteFormNavbar from './PaletteFormNavbar';\nimport ColorPickerForm from './ColorPickerForm';\nimport DraggableColourList from './DraggableColorList';\n\nconst drawerWidth = 500;\n\nconst styles = theme => ({\n  root: {\n    display: \"flex\"\n  },\n  appBar: {\n    transition: theme.transitions.create([\"margin\", \"width\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    })\n  },\n  appBarShift: {\n    width: `calc(100% - ${drawerWidth}px)`,\n    marginLeft: drawerWidth,\n    transition: theme.transitions.create([\"margin\", \"width\"], {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen\n    })\n  },\n  menuButton: {\n    marginLeft: 12,\n    marginRight: 20\n  },\n  hide: {\n    display: \"none\"\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0\n  },\n  drawerPaper: {\n    width: drawerWidth\n  },\n  drawerHeader: {\n    display: \"flex\",\n    alignItems: \"center\",\n    padding: \"0 8px\",\n    ...theme.mixins.toolbar,\n    justifyContent: \"flex-end\"\n  },\n  content: {\n    flexGrow: 1,\n    height: 'calc(100vh - 64px)',\n    padding: theme.spacing.unit * 3,\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    }),\n    marginLeft: -drawerWidth\n  },\n  contentShift: {\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen\n    }),\n    marginLeft: 0\n  }\n});\n\nclass NewPaletteForm extends Component {\n  static defaultProps = {\n    maxColors: 20\n  }\n\n  state = {\n    open: true,\n    colors: this.props.palettes[0].colors,\n    newPaletteName: '',\n  };\n\n  componentDidMount() {\n    ValidatorForm.addValidationRule('isColorNameUnique', value => \n      this.state.colors.every(\n        ({name}) => name.toLowerCase() !== value.toLowerCase()\n      )\n    );\n    ValidatorForm.addValidationRule('isColorUnique', value => \n      this.state.colors.every(\n        ({color}) => color !== this.state.currentColor)\n    );\n  }\n\n  handleDrawerOpen = () => {\n    this.setState({ open: true });\n  };\n\n  handleDrawerClose = () => {\n    this.setState({ open: false });\n  };\n\n  addNewColorHandler = (newColor) => {\n    this.setState({colors: [...this.state.colors, newColor], newName: ''});\n  }\n\n  paletteChangeHandler = (evt) => {\n    this.setState({\n      [evt.target.name]: evt.target.value\n    });\n  }\n\n  savePaletteHandler = (newPaletteName) => {\n    const newPalette = {\n      paletteName: newPaletteName, \n      id: newPaletteName.toLowerCase().replace(/ /g, '-'), \n      colors: this.state.colors};\n    this.props.savePalette(newPalette);\n    this.props.history.push('/');\n  }\n\n  deleteColorHandler = (colorName) => {\n    this.setState({\n      colors: this.state.colors.filter(color => color.name !== colorName)\n    });\n  }\n\n  sortEndHandler = ({oldIndex, newIndex}) => {\n    this.setState(({colors}) => ({\n      colors: arrayMove(colors, oldIndex, newIndex),\n    }));\n  }\n\n  clearPaletteHandler = () => {\n    this.setState({colors: []});\n  }\n\n  randomColorHandler = () => {\n    const allColors = this.props.palettes.map(p => p.colors).flat();\n    var randomNumber = Math.floor(Math.random() * allColors.length);\n    const randomColor = allColors[randomNumber];\n    this.setState({colors: [...this.state.colors, randomColor]});\n  }\n\n  render() {\n    const { classes, maxColors, palettes } = this.props;\n    const { open, colors } = this.state;\n    const paletteIsFull = colors.length >= maxColors;\n\n    return (\n      <div className={classes.root}>\n        <PaletteFormNavbar \n          open={open} classes={classes} \n          palettes={palettes} \n          savePaletteHandler={this.savePaletteHandler} \n          handleDrawerOpen={this.handleDrawerOpen}/>\n        <Drawer\n          className={classes.drawer}\n          variant='persistent'\n          anchor='left'\n          open={open}\n          classes={{\n            paper: classes.drawerPaper\n          }}\n        >\n          <div className={classes.drawerHeader}>\n            <IconButton onClick={this.handleDrawerClose}>\n              <ChevronLeftIcon />\n            </IconButton>\n          </div>\n          <Typography variant='h4'>Design Your Palette</Typography>\n          <div>\n            <Fab variant='extended' color='secondary' onClick={this.clearPaletteHandler}>\n              Clear Palette\n            </Fab>\n            <Fab variant='extended' color='primary' onClick={this.randomColorHandler} disabled={paletteIsFull}>\n            {paletteIsFull ? 'Palette Full' : 'Random Color'}\n            </Fab>\n          </div>\n          <Divider />\n          <ColorPickerForm paletteIsFull={paletteIsFull} addNewColorHandler={this.addNewColorHandler}/>\n        </Drawer>\n        <main\n          className={classNames(classes.content, {\n            [classes.contentShift]: open\n          })}\n        >\n          <div className={classes.drawerHeader} />\n          <DraggableColourList \n            colors={colors} \n            deleteColorHandler={this.deleteColorHandler}\n            axis='xy'\n            onSortEnd={this.sortEndHandler}\n            />\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles, {withTheme: true})(NewPaletteForm);"]},"metadata":{},"sourceType":"module"}